/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package client

import (
	"time"

	"github.com/teiid/teiid-operator/pkg/util/logs"
	scheme "github.com/teiid/teiid-operator/pkg/util/opentracing/client/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"

	v1 "github.com/jaegertracing/jaeger-operator/pkg/apis/jaegertracing/v1"
)

var log = logs.GetLogger("jaeger")

// JaegersGetter has a method to return a JaegerInterface.
// A group's client should implement this interface.
type JaegersGetter interface {
	Jaegers(namespace string) JaegerInterface
}

// JaegerInterface has methods to work with Jaeger resources.
type JaegerInterface interface {
	Create(*v1.Jaeger) (*v1.Jaeger, error)
	Update(*v1.Jaeger) (*v1.Jaeger, error)
	UpdateStatus(*v1.Jaeger) (*v1.Jaeger, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.Jaeger, error)
	List(opts metav1.ListOptions) (*v1.JaegerList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Jaeger, err error)
	HasJaeger(name string) bool
	JaegerExpansion
}

// jaegers implements JaegerInterface
type jaegers struct {
	client rest.Interface
	ns     string
}

// newJaegers returns a Jaegers
func newJaegers(c *JaegertracingV1Client, namespace string) *jaegers {
	return &jaegers{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the jaeger, and returns the corresponding jaeger object, and an error if there is any.
func (c *jaegers) Get(name string, options metav1.GetOptions) (result *v1.Jaeger, err error) {
	result = &v1.Jaeger{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("jaegers").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Jaegers that match those selectors.
func (c *jaegers) List(opts metav1.ListOptions) (result *v1.JaegerList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.JaegerList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("jaegers").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested jaegers.
func (c *jaegers) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("jaegers").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a jaeger and creates it.  Returns the server's representation of the jaeger, and an error, if there is any.
func (c *jaegers) Create(jaeger *v1.Jaeger) (result *v1.Jaeger, err error) {
	result = &v1.Jaeger{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("jaegers").
		Body(jaeger).
		Do().
		Into(result)
	return
}

// Update takes the representation of a jaeger and updates it. Returns the server's representation of the jaeger, and an error, if there is any.
func (c *jaegers) Update(jaeger *v1.Jaeger) (result *v1.Jaeger, err error) {
	result = &v1.Jaeger{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("jaegers").
		Name(jaeger.Name).
		Body(jaeger).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *jaegers) UpdateStatus(jaeger *v1.Jaeger) (result *v1.Jaeger, err error) {
	result = &v1.Jaeger{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("jaegers").
		Name(jaeger.Name).
		SubResource("status").
		Body(jaeger).
		Do().
		Into(result)
	return
}

// Delete takes name of the jaeger and deletes it. Returns an error if one occurs.
func (c *jaegers) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("jaegers").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *jaegers) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("jaegers").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched jaeger.
func (c *jaegers) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Jaeger, err error) {
	result = &v1.Jaeger{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("jaegers").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}

func (c *jaegers) HasJaeger(name string) bool {
	list, err := c.List(metav1.ListOptions{})
	if err == nil {
		for _, item := range list.Items {
			if name == "true" {
				return true
			}
			if item.ObjectMeta.Name == name {
				return true
			}
		}
	}
	return false
}
