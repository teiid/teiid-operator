// +build !ignore_autogenerated

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"./pkg/apis/teiid/v1alpha1.DataSourceObject":           schema_pkg_apis_teiid_v1alpha1_DataSourceObject(ref),
		"./pkg/apis/teiid/v1alpha1.Source":                     schema_pkg_apis_teiid_v1alpha1_Source(ref),
		"./pkg/apis/teiid/v1alpha1.ValueSource":                schema_pkg_apis_teiid_v1alpha1_ValueSource(ref),
		"./pkg/apis/teiid/v1alpha1.VirtualDatabase":            schema_pkg_apis_teiid_v1alpha1_VirtualDatabase(ref),
		"./pkg/apis/teiid/v1alpha1.VirtualDatabaseBuildObject": schema_pkg_apis_teiid_v1alpha1_VirtualDatabaseBuildObject(ref),
		"./pkg/apis/teiid/v1alpha1.VirtualDatabaseSpec":        schema_pkg_apis_teiid_v1alpha1_VirtualDatabaseSpec(ref),
		"./pkg/apis/teiid/v1alpha1.VirtualDatabaseStatus":      schema_pkg_apis_teiid_v1alpha1_VirtualDatabaseStatus(ref),
	}
}

func schema_pkg_apis_teiid_v1alpha1_DataSourceObject(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DataSourceObject - define the datasources that this Virtual Database integrates",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the Data Source",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of Data Source. ex: Oracle, PostgreSQL, MySQL, Salesforce etc.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"properties": {
						SchemaProps: spec.SchemaProps{
							Description: "Properties required for Data Source connection",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.EnvVar"},
	}
}

func schema_pkg_apis_teiid_v1alpha1_Source(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Source VDB coordinates to locate the source code to build",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Deployed vdb version. For embedded DDL version this will be implicitly provided when ignored, for maven based vdb the maven version is always",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ddl": {
						SchemaProps: spec.SchemaProps{
							Description: "DDL based VDB",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"maven": {
						SchemaProps: spec.SchemaProps{
							Description: "A VDB defined in GAV format",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"openapi": {
						SchemaProps: spec.SchemaProps{
							Description: "Open API contract that is exposed by the VDB",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dependencies": {
						SchemaProps: spec.SchemaProps{
							Description: "List of maven dependencies for the build in GAV format",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"mavenRepositories": {
						SchemaProps: spec.SchemaProps{
							Description: "Custom maven repositories that need to be used for the S2I build",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"mavenSettings": {
						SchemaProps: spec.SchemaProps{
							Description: "Custom Maven settings.xml file to go with build in a configmap or secret",
							Ref:         ref("./pkg/apis/teiid/v1alpha1.ValueSource"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/teiid/v1alpha1.ValueSource"},
	}
}

func schema_pkg_apis_teiid_v1alpha1_ValueSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ValueSource --",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"configMapKeyRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Selects a key of a ConfigMap.",
							Ref:         ref("k8s.io/api/core/v1.ConfigMapKeySelector"),
						},
					},
					"secretKeyRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Selects a key of a secret.",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ConfigMapKeySelector", "k8s.io/api/core/v1.SecretKeySelector"},
	}
}

func schema_pkg_apis_teiid_v1alpha1_VirtualDatabase(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VirtualDatabase is the Schema for the virtualdatabases API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Virtual Database specification",
							Ref:         ref("./pkg/apis/teiid/v1alpha1.VirtualDatabaseSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Virtual Database Status",
							Ref:         ref("./pkg/apis/teiid/v1alpha1.VirtualDatabaseStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/teiid/v1alpha1.VirtualDatabaseSpec", "./pkg/apis/teiid/v1alpha1.VirtualDatabaseStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_teiid_v1alpha1_VirtualDatabaseBuildObject(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VirtualDatabaseBuildObject Data to define how to build an application from source",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "Environment properties set build purpose",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"source": {
						SchemaProps: spec.SchemaProps{
							Description: "VDB Source details",
							Ref:         ref("./pkg/apis/teiid/v1alpha1.Source"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/teiid/v1alpha1.Source", "k8s.io/api/core/v1.EnvVar"},
	}
}

func schema_pkg_apis_teiid_v1alpha1_VirtualDatabaseSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VirtualDatabaseSpec defines the desired state of VirtualDatabase",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Number Of deployment units required",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"exposeVia3scale": {
						SchemaProps: spec.SchemaProps{
							Description: "Expose route via 3scale",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "Environment properties required for deployment",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "memory, disk cpu requirements",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"build": {
						SchemaProps: spec.SchemaProps{
							Description: "S2I Build configuration",
							Ref:         ref("./pkg/apis/teiid/v1alpha1.VirtualDatabaseBuildObject"),
						},
					},
					"jaeger": {
						SchemaProps: spec.SchemaProps{
							Description: "Jaeger instance to use to push the tracing information",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"datasources": {
						SchemaProps: spec.SchemaProps{
							Description: "DataSources configuration for this Virtual Database",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/teiid/v1alpha1.DataSourceObject"),
									},
								},
							},
						},
					},
				},
				Required: []string{"build"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/teiid/v1alpha1.DataSourceObject", "./pkg/apis/teiid/v1alpha1.VirtualDatabaseBuildObject", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.ResourceRequirements"},
	}
}

func schema_pkg_apis_teiid_v1alpha1_VirtualDatabaseStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VirtualDatabaseStatus defines the observed state of VirtualDatabase",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "The current phase of the build the operator deployment is running",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"digest": {
						SchemaProps: spec.SchemaProps{
							Description: "Digest value of the vdb",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"configdigest": {
						SchemaProps: spec.SchemaProps{
							Description: "ConfigDigest value of the vdb",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"failure": {
						SchemaProps: spec.SchemaProps{
							Description: "Failure message if deployment ended in failure",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"route": {
						SchemaProps: spec.SchemaProps{
							Description: "Route information that is exposed for clients",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Deployed vdb version.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}
